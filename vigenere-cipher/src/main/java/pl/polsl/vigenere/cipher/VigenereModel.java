/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package pl.polsl.vigenere.cipher;

/**
 *
 * @author Bartosz Dera
 * @version 1.0
 */
public class VigenereModel {
    /**
     * Encoded message, generated by the encodeMessage() method.
     */
    private String encodedMessage;
    
    /**
     * Key, used by encodeMessage method to encrypt the message.
     */
    private String encryptionKey;
    
    /**
     * Secret letter given by user.
     * Instered on the beginning of the encryptionKey attribute.
     */
    private String secretLetter;
    
    /**
     * Message given by user to encode.
     */
    private String textToCode;
    
    /**
     * Constructor of VigenereModel. Every String is converted to upper case.
     * @param secretLetter Letter given by user to be first in the encoded message.
     * @param textToCode String to be encoded.
     */
//    public VigenereModel(String secretLetter, String textToCode){
//        this.secretLetter=secretLetter.toUpperCase();
//        this.textToCode=textToCode.toUpperCase();
//    }
//    
//    public VigenereModel(){}
    
    /**
     * Method for creating key used to encode message.
     */
    private void createKey(){
        encryptionKey = secretLetter + shiftRight(textToCode);
    }
    
    public String shiftRight(String text)
    {
        String[] strings = text.split(" ");

        String lastCharacter = "";
        for (int i = 0; i < strings.length; i++)
        {
            String currentText = lastCharacter + strings[i];
            lastCharacter = currentText.substring(currentText.length() - 1);
            strings[i] = currentText.substring(0, currentText.length() - 1);
        }
        return String.join(" ", strings);
    }
    
    /**
     * Method responsible for encoding given message.
     */
    public void encodeMessage(){
        char[] charEncodedMessage = new char[textToCode.length()];
        createKey();
        
        System.out.println(textToCode);
        System.out.println(encryptionKey);
        
        char[][] cipherTable=new char[26][26];
        createCipherTable(cipherTable);
        Character spaceChar = ' ';
        
        for(int i = 0; i < textToCode.length(); i++) {
            if( textToCode.charAt(i) == ' ' ){
                charEncodedMessage[i] = ' ';
                continue;
            };
            //Read char value and then get numeric value of character, substitute by 10 (getNumericValue also reads values of 0-9 numbers)
            charEncodedMessage[i] = cipherTable[Character.getNumericValue(textToCode.charAt(i)) - 10][Character.getNumericValue(encryptionKey.charAt(i)) - 10];
        }

        encodedMessage = new String(charEncodedMessage);
    }
    
    /**
     * Get the atribute encodedMessage.
     * @return Encoded message
     */
    public String getEncodedMessage(){
        return encodedMessage;
    }
    
    public void setTextToCode(String text){
        this.textToCode=text;
    }
    
    public void setSecretLetter(String secretLetter){
        this.secretLetter = Character.toString(secretLetter.charAt(0));
    }
    
    /** 
     * Method to remove last character from given String.
     * @param s String to have last character removed
     * @return substring os String without last character
     */
    private String removeLastChar(String s){  
        return s.substring(0, s.length() - 1);  
    }
    
    /**
     * Initialize cipherTable with uppercase letters.
     * @param cipherTable Table to bo initialized
     */
    private void createCipherTable(char[][] cipherTable){
        for (int i = 0; i < 26; i++) {
            for (int j = 0; j < 26; j++) {
                cipherTable[i][j]=(char)(65 + ((i+j)%26));
            }
        }
    }
    
    public void setParamFromCommandLine(String[] args){
        for (int i = 0; i < args.length; i++) {
            if(args[i].equalsIgnoreCase("-key")){
                setSecretLetter(args[i+1]);
            }
            else if(args[i].equalsIgnoreCase("-message")){
                    this.textToCode=args[i+1];
                }
        }
    }
}